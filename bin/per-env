#!/usr/bin/env node

var pkg = require(process.cwd() + "/package.json");
var spawnSync = require("child_process").spawnSync;
var fs = require('fs');
var path = require('path');

var key = process.argv.slice( 2, 3 )[ 0 ] || 'NODE_ENV';

var use_dot_env = true
if ( use_dot_env ) {
  var dotenv = null
  var cwd = process.cwd()
  var done = false
  var found = false
  while( !done && !found ) {
    found = fs.existsSync( path.join( cwd, '.env' ) )
    if ( !found ) {
      tmp = cwd.split('/')
      tmp.pop()
      cwd = tmp.join('/')
      done = ( tmp.length <= 1) 
    }
  }

  if ( found ) {
    dotenv = require('dotenv').config( { path: path.join( cwd, ".env" ) } );
  }
}


// Default to "development"
var NODE_ENV = process.env[ key ] || "development";

var env_obj = {}
env_obj[ key ] = NODE_ENV

var env = Object.assign(
  {},
  // Default NODE_ENV
  env_obj,
  // Override with package.json custom env variables
  (pkg && pkg["per-env"] && pkg["per-env"][key]) || {},

  // Explicit env takes precedence
  process.env
);

var command = "npm";

var script = [
  env.npm_lifecycle_event, // e.g. "start"
  env[ key ],
].join(":"); // e.g. "start:development"

var args = [
  "run",
  script
].concat(
  // Extra arguments after "per-env"
  process.argv.slice(2)
);

var options = {
  cwd: process.cwd(),
  env: env,
  stdio: "inherit"
};

var result = spawnSync(command, args, options);

process.exit(result.status);